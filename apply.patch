 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/.env.example b/.env.example
index b76bad501835f5f5588cfed79c9c17f68216edad..f8af6dd036377a52170bf37615ad13d2b7bf4b2f 100644
--- a/.env.example
+++ b/.env.example
@@ -1 +1,2 @@
 VITE_API_BASE_URL=some_url
+VITE_AUTH_API_URL=https://auth.example.com
diff --git a/README.md b/README.md
index 48f386c0232a074a3996569d64907907bf1bb032..e942302741f296f5cacf27604221dc05ad55d2a9 100644
--- a/README.md
+++ b/README.md
@@ -1,34 +1,37 @@
 # Vue 3 + Vite
 
 This template should help get you started developing with Vue 3 in Vite. The template uses Vue 3 `<script setup>` SFCs, check out the [script setup docs](https://v3.vuejs.org/api/sfc-script-setup.html#sfc-script-setup) to learn more.
 
 Learn more about IDE Support for Vue in the [Vue Docs Scaling up Guide](https://vuejs.org/guide/scaling-up/tooling.html#ide-support).
 
 ## Admin Panel
 
 To start the admin interface run:
 
 ```bash
 npm run admin:dev
 ```
 
+Both the main application and the admin portal expect `VITE_AUTH_API_URL` to be
+set to the authentication service base URL.
+
 ### How It Works
 
 All member accounts are created from the admin portal. From the **Members** page administrators can invite new users by entering their name, email and role. The dashboard sends a `POST /admin/invite` request which triggers an email using `templates/member-invitation.html`.
 
 The members list is retrieved via `GET /admin/members` and follows this shape:
 
 ```ts
 {
   id: string;
   name: string;
   email: string;
   role: string;
   invitedAt: string;
   isOnline: boolean;
 }
 ```
 
 Deleting a member uses `DELETE /admin/members/:id`.
 
 Email templates are located in the `templates/` folder. Integrate them with your mailer by loading the HTML file and replacing the placeholders with dynamic data before sending.
diff --git a/packages/admin/.env.example b/packages/admin/.env.example
new file mode 100644
index 0000000000000000000000000000000000000000..818b696972c900cc62deda6272a59c89b5ac2dc8
--- /dev/null
+++ b/packages/admin/.env.example
@@ -0,0 +1 @@
+VITE_AUTH_API_URL=https://auth.example.com
diff --git a/packages/admin/src/pages/AdminLogin.vue b/packages/admin/src/pages/AdminLogin.vue
index 73cc96f7c80883ec493164db8aed55637819d475..94ffe375e4a4f6df5c421862fb868abd7f31872e 100644
--- a/packages/admin/src/pages/AdminLogin.vue
+++ b/packages/admin/src/pages/AdminLogin.vue
@@ -1,95 +1,120 @@
 <script lang="ts" setup>
 import AppForm from "@root/components/AppForm.vue";
-import {
-  storeToRefs,
-} from "pinia";
-import {
-  computed,
-  onMounted,
-  reactive,
-  ref,
-} from "vue";
-import {
-  useRouter,
-} from "vue-router";
+import { storeToRefs } from "pinia";
+import { computed, onMounted, reactive, ref } from "vue";
+import { useRouter } from "vue-router";
 
-import {
-  useAuthStore,
-} from "@root/store/server/auth";
-import {
-  getCookie,
-} from "@root/utils/functions";
+import { useAuthStore } from "@root/store/server/auth";
+import { getToken } from "@root/utils/token";
 
 const loginForm = reactive({
   email: "",
   password: "",
 });
 const showPassword = ref(false);
 const FormFieldUI = {
   label: "text-black text-lg",
 };
 const inputUI = {
   trailing: "pe-1",
   root: "w-full",
   base: "p-4 bg-inherit text-black",
 };
 const router = useRouter();
 const authStore = useAuthStore();
-const {
-  login,
-} = authStore;
-const {
-  success: authSuccess,
-  loading: authLoading,
-} = storeToRefs(authStore);
+const { login } = authStore;
+const { success: authSuccess, loading: authLoading } = storeToRefs(authStore);
 
-const isFormComplete = computed(() => loginForm.email !== "" && loginForm.password !== "");
+const isFormComplete = computed(
+  () => loginForm.email !== "" && loginForm.password !== "",
+);
 
 onMounted(() => {
-  const token = getCookie("token");
+  const token = getToken();
   if (token) {
     authStore.setAccessToken(token);
     router.push({
       name: "admin-dashboard",
     });
   }
 });
 
 async function onSubmit() {
   await login(loginForm);
   if (authSuccess.value) {
     router.push({
       name: "admin-dashboard",
     });
   }
 }
 </script>
 
 <template>
   <section class="w-full h-screen bg-white flex">
     <section class="bg-gray-800 w-full h-screen relative p-4 hidden lg:block">
-      <img src="@root/assets/svg/Asset 11.svg" alt="logo" class="h-[30px]">
-      <img src="@root/assets/images/Humaaans.png" alt="background" class="w-full h-[80dvh] mt-4 object-center object-fill">
+      <img src="@root/assets/svg/Asset 11.svg" alt="logo" class="h-[30px]" />
+      <img
+        src="@root/assets/images/Humaaans.png"
+        alt="background"
+        class="w-full h-[80dvh] mt-4 object-center object-fill"
+      />
     </section>
-    <section class="w-full flex flex-col items-center h-screen justify-center p-4">
-      <img src="@root/assets/svg/Asset 7.svg" alt="logo" class="w-[100px] h-[100px] mb-4">
+    <section
+      class="w-full flex flex-col items-center h-screen justify-center p-4"
+    >
+      <img
+        src="@root/assets/svg/Asset 7.svg"
+        alt="logo"
+        class="w-[100px] h-[100px] mb-4"
+      />
       <div class="w-full max-w-[400px]">
-        <AppForm :state="loginForm" title="Admin Portal Login" @submit="onSubmit">
+        <AppForm
+          :state="loginForm"
+          title="Admin Portal Login"
+          @submit="onSubmit"
+        >
           <UFormField label="Email" name="email" :ui="FormFieldUI">
-            <UInput v-model="loginForm.email" placeholder="Enter your email" color="info" type="email" :ui="inputUI" />
+            <UInput
+              v-model="loginForm.email"
+              placeholder="Enter your email"
+              color="info"
+              type="email"
+              :ui="inputUI"
+            />
           </UFormField>
           <UFormField label="Password" name="password" :ui="FormFieldUI">
-            <UInput v-model="loginForm.password" placeholder="Enter your password" color="info" :type="showPassword ? 'text' : 'password'" :ui="inputUI">
+            <UInput
+              v-model="loginForm.password"
+              placeholder="Enter your password"
+              color="info"
+              :type="showPassword ? 'text' : 'password'"
+              :ui="inputUI"
+            >
               <template #trailing>
-                <UButton variant="link" size="lg" :icon="showPassword ? 'i-lucide-eye-off' : 'i-lucide-eye'" :aria-label="showPassword ? 'Hide password' : 'Show password'" :aria-pressed="showPassword" aria-controls="password" class="cursor-pointer text-black hover:text-black" @click="showPassword = !showPassword" />
+                <UButton
+                  variant="link"
+                  size="lg"
+                  :icon="showPassword ? 'i-lucide-eye-off' : 'i-lucide-eye'"
+                  :aria-label="showPassword ? 'Hide password' : 'Show password'"
+                  :aria-pressed="showPassword"
+                  aria-controls="password"
+                  class="cursor-pointer text-black hover:text-black"
+                  @click="showPassword = !showPassword"
+                />
               </template>
             </UInput>
           </UFormField>
-          <UButton class="w-full items-center justify-center outline p-3 mt-3 cursor-pointer bg-gray-900 text-white hover:bg-gray-800 disabled:bg-gray-400" :disabled="!isFormComplete || authLoading" :loading-auto="authLoading" :loading="authLoading" @click="onSubmit">
+          <UButton
+            class="w-full items-center justify-center outline p-3 mt-3 cursor-pointer bg-gray-900 text-white hover:bg-gray-800 disabled:bg-gray-400"
+            :disabled="!isFormComplete || authLoading"
+            :loading-auto="authLoading"
+            :loading="authLoading"
+            @click="onSubmit"
+          >
             Login
           </UButton>
         </AppForm>
       </div>
     </section>
   </section>
 </template>
diff --git a/src/pages/Auth/Login.vue b/src/pages/Auth/Login.vue
index 8c041b9ee1819667468f224529590510033c558d..bdccb9e13bdce3fd32661cea024b454bb47d644d 100644
--- a/src/pages/Auth/Login.vue
+++ b/src/pages/Auth/Login.vue
@@ -1,111 +1,93 @@
 <script lang="ts" setup>
-import {
-  storeToRefs,
-} from "pinia";
-import {
-  computed,
-  onMounted,
-  reactive,
-  ref,
-} from "vue";
-import {
-  useRouter,
-} from "vue-router";
+import { storeToRefs } from "pinia";
+import { computed, onMounted, reactive, ref } from "vue";
+import { useRouter } from "vue-router";
 
-import {
-  useAuthStore,
-} from "../../store/server/auth";
-import {
-  getCookie,
-} from "../../utils/functions";
+import { useAuthStore } from "../../store/server/auth";
+import { getToken } from "../../utils/token";
 
 const loginForm = reactive({
   email: "",
   password: "",
 });
 const showPassword = ref(false);
 const FormFieldUI = {
   label: "text-black text-lg",
 };
 const inputUI = {
   trailing: "pe-1",
   root: "w-full",
   base: "p-4 bg-inherit text-black",
 };
 const isFormComplete = computed(() => {
   return loginForm.email !== "" && loginForm.password !== "";
 });
 const router = useRouter();
 const authStore = useAuthStore();
-const {
-  login,
-} = authStore;
-const {
-  success: authSuccess,
-  loading: authLoading,
-} = storeToRefs(authStore);
+const { login } = authStore;
+const { success: authSuccess, loading: authLoading } = storeToRefs(authStore);
 
 onMounted(() => {
-  const token = getCookie("token");
+  const token = getToken();
   if (token) {
     authStore.setAccessToken(token);
     router.push({
       name: "exams",
     });
   }
 });
 
 async function onSubmit() {
   await login(loginForm);
 
   if (authSuccess.value) {
     router.push({
       name: "license",
     });
   }
 }
 </script>
 
 <template>
   <section class="w-full h-screen bg-white flex">
     <section class="bg-gray-800 w-full h-screen relative p-4 hidden lg:block">
-      <img src="../../assets/svg/Asset 11.svg" alt="logo" class="h-[30px]">
+      <img src="../../assets/svg/Asset 11.svg" alt="logo" class="h-[30px]" />
       <img
         src="../../assets/images/Humaaans.png"
         alt="background"
         class="w-full h-[80dvh] mt-4 object-center object-fill"
-      >
+      />
     </section>
     <section
       class="w-full flex flex-col items-center h-screen justify-center p-4"
     >
       <img
         src="../../assets/svg/Asset 7.svg"
         alt="logo"
         class="w-[100px] h-[100px]"
-      >
+      />
       <AppForm :state="loginForm" title="Login" @submit="onSubmit">
         <UFormField label="Email" name="email" :ui="FormFieldUI">
           <UInput
             v-model="loginForm.email"
             placeholder="Enter your email"
             color="info"
             type="email"
             :ui="inputUI"
           />
         </UFormField>
         <UFormField label="Password" name="password" :ui="FormFieldUI">
           <UInput
             v-model="loginForm.password"
             placeholder="Enter your password"
             color="info"
             :type="showPassword ? 'text' : 'password'"
             :ui="inputUI"
           >
             <template #trailing>
               <UButton
                 variant="link"
                 size="lg"
                 :icon="showPassword ? 'i-lucide-eye-off' : 'i-lucide-eye'"
                 :aria-label="showPassword ? 'Hide password' : 'Show password'"
                 :aria-pressed="showPassword"
diff --git a/src/store/server/auth.ts b/src/store/server/auth.ts
index a3104108b3c89a7e74041fb4801e0eb6ecfaf2b6..7d82ad3c405b92c4e9617340d99c341a592fd06d 100644
--- a/src/store/server/auth.ts
+++ b/src/store/server/auth.ts
@@ -1,146 +1,121 @@
-import {
-  defineStore,
-} from "pinia";
+import { defineStore } from "pinia";
 
-import type {
-  BaseState,
-} from "../../utils/types";
+import type { BaseState } from "../../utils/types";
 
 import router from "../../router";
+import { axiosInstance } from "../../utils/axiosConfig";
+import axios from "axios";
 import {
-  axiosInstance,
-} from "../../utils/axiosConfig";
-import {
-  errorToast,
-  successToast,
-} from "../../utils/toast";
+  saveToken,
+  getToken as getStoredToken,
+  removeToken,
+} from "../../utils/token";
+import { errorToast, successToast } from "../../utils/toast";
 
 type AuthState = {
-  access: string;
+  token: string;
 } & BaseState;
 
 type LoginPayload = {
   email: string;
   password: string;
 };
 
 type RegisterPayload = {
   name: string;
 } & LoginPayload;
 
 export const useAuthStore = defineStore("auth", {
   state: (): AuthState => ({
     loading: false,
     success: false,
-    access: "",
+    token: "",
   }),
   actions: {
     async login(payload: LoginPayload) {
       try {
         this.success = false;
         this.loading = true;
-        const {
-          data,
-        } = await axiosInstance.post("/users/login", payload);
-        const {
-          access_token,
-          name,
-        } = data;
-        this.access = access_token;
-        this.setAccessToken(access_token);
-        this.setToken("name", name);
+        const authUrl = `${import.meta.env.VITE_AUTH_API_URL || ""}/auth/login`;
+        const { data } = await axios.post(authUrl, payload);
+        const { token, user } = data;
+        this.token = token;
+        this.setAccessToken(token);
+        this.setToken("name", user?.name);
         successToast("Login Successful");
         this.success = true;
-      }
-      catch (error: any) {
+      } catch (error: any) {
         this.success = false;
-        const errorMessage
-          = error.response?.data?.message || error.message || "Network Error";
+        const errorMessage =
+          error.response?.data?.message || error.message || "Network Error";
         errorToast(errorMessage);
         throw new Error(errorMessage);
-      }
-      finally {
+      } finally {
         this.loading = false;
       }
     },
 
     async register(payload: RegisterPayload) {
       try {
         this.success = false;
         this.loading = true;
-        const {
-          data,
-        } = await axiosInstance.post("/users/signup", payload);
-        const {
-          message,
-        } = data;
+        const { data } = await axiosInstance.post("/users/signup", payload);
+        const { message } = data;
         this.success = true;
         successToast(message);
-      }
-      catch (error: any) {
+      } catch (error: any) {
         this.success = false;
-        const errorMessage
-          = error.response?.data?.message || error.message || "Network Error";
+        const errorMessage =
+          error.response?.data?.message || error.message || "Network Error";
         errorToast(errorMessage);
         throw new Error(errorMessage);
-      }
-      finally {
+      } finally {
         this.loading = false;
       }
     },
 
     setAccessToken(token: string) {
       this.clearAccessToken();
-      this.access = token;
-      this.setToken("access", token);
+      this.token = token;
+      saveToken(token);
     },
 
     clearAccessToken() {
-      this.access = "";
-      this.clearToken("access");
+      this.token = "";
+      removeToken();
     },
 
-    setToken(key: string, token: string) {
-      localStorage.setItem(key, JSON.stringify(token));
+    setToken(key: string, value: string) {
+      localStorage.setItem(key, JSON.stringify(value));
     },
 
     clearToken(key: string) {
       if (localStorage.getItem(key)) {
         localStorage.removeItem(key);
       }
     },
 
     async logout() {
       try {
         await axiosInstance.post("/users/logout");
-      }
-      catch (error: any) {
-        const errorMessage
-          = error.response?.data?.message || error.message || "Network Error";
+      } catch (error: any) {
+        const errorMessage =
+          error.response?.data?.message || error.message || "Network Error";
         errorToast(errorMessage);
-      }
-      finally {
+      } finally {
         this.clearAccessToken();
         this.clearToken("name");
         router.push({
           name: "login",
         });
       }
     },
   },
   getters: {
     getAuthToken(state) {
-      const storageToken = localStorage.getItem("access");
-      if (storageToken)
-        return storageToken;
-      const cookieToken
-        = typeof document !== "undefined"
-          ? document.cookie
-            .split("; ")
-            .map(c => c.split("="))
-            .find(([name]) => name === "token")?.[1]
-          : null;
-      return cookieToken || state.access;
+      const storageToken = getStoredToken();
+      if (storageToken) return storageToken;
+      return state.token;
     },
   },
 });
diff --git a/src/utils/axiosConfig.ts b/src/utils/axiosConfig.ts
index 3cc928c3ebb6c8766edaa8ac609fe723a37347ad..f24881236ab33f43ea5c1ab94d57588b23a96250 100644
--- a/src/utils/axiosConfig.ts
+++ b/src/utils/axiosConfig.ts
@@ -1,68 +1,60 @@
 import axios from "axios";
 
-import {
-  useAuthStore,
-} from "../store/server/auth";
-import {
-  errorToast,
-} from "./toast";
+import { useAuthStore } from "../store/server/auth";
+import { errorToast } from "./toast";
+import { getToken } from "./token";
 
 const baseURL = import.meta.env.VITE_API_BASE_URL || "";
 
 export const axiosInstance = axios.create({
   baseURL,
   headers: {
     "Content-Type": "application/json",
   },
   withCredentials: true,
 });
 
-axiosInstance.interceptors.request.use((config) => {
-  const {
-    getAuthToken,
-    access,
-  } = useAuthStore();
+axiosInstance.interceptors.request.use(
+  (config) => {
+    const store = useAuthStore();
+    const token = store.token || getToken();
 
-  const excludedUrls = ["/users/login"];
+    const excludedUrls = ["/auth/login"];
 
-  const isExcludedUrl = excludedUrls.some(url => config.url?.includes(url));
+    const isExcludedUrl = excludedUrls.some((url) => config.url?.includes(url));
 
-  if (!isExcludedUrl) {
-    if (getAuthToken) {
-      if (access) {
-        config.headers.Authorization = `Bearer ${access}`;
-      }
-      else {
-        config.headers.Authorization = `Bearer ${JSON.parse(getAuthToken)}`;
-      }
+    if (!isExcludedUrl && token) {
+      config.headers.Authorization = `Bearer ${token}`;
     }
-  }
-
-  return config;
-}, error => Promise.reject(error));
-
-axiosInstance.interceptors.response.use(response => response, (error) => {
-  console.error({
-    error,
-  });
-
-  const status = error.response?.status;
-  const requestUrl: string = error.config?.url || "";
 
-  if (status === 401) {
-    const excluded = ["/users/login", "/users/logout"];
-    const shouldLogout = !excluded.some(url => requestUrl.includes(url));
-    if (shouldLogout) {
-      const {
-        logout,
-      } = useAuthStore();
-      logout();
+    return config;
+  },
+  (error) => Promise.reject(error),
+);
+
+axiosInstance.interceptors.response.use(
+  (response) => response,
+  (error) => {
+    console.error({
+      error,
+    });
+
+    const status = error.response?.status;
+    const requestUrl: string = error.config?.url || "";
+
+    if (status === 401) {
+      const excluded = ["/auth/login", "/users/logout"];
+      const shouldLogout = !excluded.some((url) => requestUrl.includes(url));
+      if (shouldLogout) {
+        const { logout } = useAuthStore();
+        logout();
+      }
     }
-  }
 
-  if (status === 429) {
-    errorToast("You are making too many requests, wait a minute");
-  }
+    if (status === 429) {
+      errorToast("You are making too many requests, wait a minute");
+    }
 
-  return Promise.reject(error ?? "Unable to reach server, try again later");
-});
+    return Promise.reject(error ?? "Unable to reach server, try again later");
+  },
+);
diff --git a/src/utils/token.ts b/src/utils/token.ts
new file mode 100644
index 0000000000000000000000000000000000000000..fb6b1da25d0a6199dac7dd4c07a8280925a4a208
--- /dev/null
+++ b/src/utils/token.ts
@@ -0,0 +1,13 @@
+export const TOKEN_KEY = "jwt";
+
+export function saveToken(token: string) {
+  localStorage.setItem(TOKEN_KEY, token);
+}
+
+export function getToken(): string | null {
+  return localStorage.getItem(TOKEN_KEY);
+}
+
+export function removeToken() {
+  localStorage.removeItem(TOKEN_KEY);
+}
 
EOF
)
